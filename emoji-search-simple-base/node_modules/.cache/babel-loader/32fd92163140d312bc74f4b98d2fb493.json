{"ast":null,"code":"import _toConsumableArray from \"/home/techmanager/ALL_GITS/corrections emojis garden/excercise_intermediaire_emoji_list/emoji-search-simple-base/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/techmanager/ALL_GITS/corrections emojis garden/excercise_intermediaire_emoji_list/emoji-search-simple-base/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/techmanager/ALL_GITS/corrections emojis garden/excercise_intermediaire_emoji_list/emoji-search-simple-base/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/techmanager/ALL_GITS/corrections emojis garden/excercise_intermediaire_emoji_list/emoji-search-simple-base/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/techmanager/ALL_GITS/corrections emojis garden/excercise_intermediaire_emoji_list/emoji-search-simple-base/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/techmanager/ALL_GITS/corrections emojis garden/excercise_intermediaire_emoji_list/emoji-search-simple-base/src/App.js\";\nimport \"./App.css\";\nimport Line from \"./components/Line\";\nimport emojis from \"./emojis.json\";\nimport React from 'react';\nimport SearchBar from \"./components/SearchBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n\n    _this.clickToFilter = function (kind) {\n      var newEmojis = _toConsumableArray(emojis);\n\n      var emojisFilter = [];\n\n      if (kind === \"Animals\") {\n        //afficher \"All\" si on clique sur Animals\n        emojisFilter = newEmojis.filter(function (elem) {\n          return elem.keywords.includes(\"dog\");\n        });\n        return _this.setState({\n          emojis: emojisFilter\n        });\n      } else if (kind === \"People\") {\n        //afficher \"People\" si on clique sur People\n        emojisFilter = newEmojis.filter(function (elem) {\n          return elem.keywords.includes(\"women\");\n        });\n        return _this.setState({\n          emojis: emojisFilter\n        });\n      } else if (kind === \"All\") {\n        //afficher \"Animals\" si on clique sur All\n        return _this.setState({\n          emojis: emojis\n        });\n      } else {}\n    };\n\n    _this.handleChange = function (event) {\n      var word = emojis.indexOf();\n      _this.setState;\n    };\n\n    _this.state = {\n      inputValue: '',\n      emojis: emojis\n    }; //pour utiliser emojis en tant que tout le tableau dans tout le code librement\n    //Pour ainsi faire il faut renommer les varioables dans les if/else dans clickToFilter\n    //this.copyemojis = emojis\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log(this.state.inputValue);\n    } //handleJsonInfo = () => {\n    //  const valuesArray = JSON.parse(this.state.emojis)\n    //}\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n          handleChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Search\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: function onClick() {\n              return _this2.clickToFilter(\"All\");\n            },\n            className: \"button\",\n            children: \"All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: function onClick() {\n              return _this2.clickToFilter(\"People\");\n            },\n            className: \"button\",\n            children: \"People\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: function onClick() {\n              return _this2.clickToFilter(\"Animals\");\n            },\n            className: \"button\",\n            children: \"Animals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 7\n        }, this), this.state.emojis.map(function (elem, index) {\n          if (index !== -1) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Line, {\n                title: elem.title,\n                symbol: elem.symbol\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 17\n              }, _this2)\n            }, index + elem.title, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, _this2);\n          }\n        })]\n      }, void 0, true);\n    }\n  }]);\n\n  return App;\n}(React.Component); //Étape 4 : implémenter le composant Line pour quon puisse copier le symbole en cliquant sur la ligne\n\n\nexport default App;","map":{"version":3,"sources":["/home/techmanager/ALL_GITS/corrections emojis garden/excercise_intermediaire_emoji_list/emoji-search-simple-base/src/App.js"],"names":["Line","emojis","React","SearchBar","App","props","clickToFilter","kind","newEmojis","emojisFilter","filter","elem","keywords","includes","setState","handleChange","event","word","indexOf","state","inputValue","console","log","map","index","title","symbol","Component"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport Line from \"./components/Line\";\nimport emojis from \"./emojis.json\";\nimport React from 'react';\nimport SearchBar from \"./components/SearchBar\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {inputValue: '', emojis: emojis}\n    //pour utiliser emojis en tant que tout le tableau dans tout le code librement\n    //Pour ainsi faire il faut renommer les varioables dans les if/else dans clickToFilter\n    //this.copyemojis = emojis\n  } \n  \n\n  clickToFilter = (kind) => {\n    const newEmojis = [...emojis]\n    let emojisFilter = []\n    if (kind === \"Animals\") {\n      //afficher \"All\" si on clique sur Animals\n      emojisFilter = newEmojis.filter(elem => elem.keywords.includes(\"dog\"))\n      return this.setState({emojis : emojisFilter})\n    }\n\n    else if (kind === \"People\") {\n      //afficher \"People\" si on clique sur People\n      \n      emojisFilter = newEmojis.filter(elem => elem.keywords.includes(\"women\"))\n      return this.setState({emojis : emojisFilter})\n    }\n    \n    else if (kind === \"All\") {\n      //afficher \"Animals\" si on clique sur All\n      return this.setState({emojis : emojis})\n    }\n\n    else {\n\n    }\n    \n}\n\nhandleChange = (event) => {\n  const word = emojis.indexOf()\n  this.setState\n}  \n    \ncomponentDidUpdate () {\n  console.log(this.state.inputValue)\n} \n\n  //handleJsonInfo = () => {\n  //  const valuesArray = JSON.parse(this.state.emojis)\n  //}\n\n  render () {\n  return (\n    <>\n      <SearchBar handleChange={this.handleChange}/>\n      <div className=\"Search\">\n        <button onClick={() => this.clickToFilter(\"All\")} className=\"button\">All</button>\n        <button onClick={() => this.clickToFilter(\"People\")} className=\"button\">People</button>\n        <button onClick={() => this.clickToFilter(\"Animals\")} className=\"button\">Animals</button>\n      </div>\n      {this.state.emojis.map((elem, index) => {\n        if (index !== -1) {\n          \n\n          return (\n              <div key={index + elem.title}>\n                <Line title={elem.title} symbol={elem.symbol}/>\n              </div>\n              )\n            }\n          }\n      )}\n    </>\n    )\n  }\n}\n//Étape 4 : implémenter le composant Line pour quon puisse copier le symbole en cliquant sur la ligne\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}